<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>terraform</id>
    <title>Terraform</title>
    <version>0.5.0</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer</owners>
    <summary>Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.</summary>
    <description>
Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions.

The key features of Terraform are:

*	**Infrastructure as Code**: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.
*	**Execution Plans**: Terraform has a "planning" step where it generates an *execution plan*. The execution plan shows what Terraform will do when you call apply. This lets you avoid any surprises when Terraform manipulates infrastructure.
*	**Resource Graph**: Terraform builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, Terraform builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.
*	**Change Automation**: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what Terraform will change and in what order, avoiding many possible human errors.

For more information, see the [introduction section](http://www.terraform.io/intro) of the Terraform website.
    </description>
    <releaseNotes>
## 0.5.0 (May 7, 2015)

BACKWARDS INCOMPATIBILITIES:

  * provider/aws: Terraform now remove the default egress rule created by AWS in
    a new security group.

FEATURES:

  * **Multi-provider (a.k.a multi-region)**: Multiple instances of a single
     provider can be configured so resources can apply to different settings.
     As an example, this allows Terraform to manage multiple regions with AWS.
  * **Environmental variables to set variables**: Environment variables can be
     used to set variables. The environment variables must be in the format
     `TF_VAR_name` and this will be checked last for a value.
  * **New remote state backend: `s3`**: You can now store remote state in
     an S3 bucket. [GH-1723]
  * **Automatic AWS retries**: This release includes a lot of improvement
     around automatic retries of transient errors in AWS. The number of
     retry attempts is also configurable.
  * **Templates**: A new `template_file` resource allows long strings needing
     variable interpolation to be moved into files. [GH-1778]
  * **Provision with WinRM**: Provisioners can now run remote commands on
     Windows hosts. [GH-1483]

IMPROVEMENTS:

  * **New config function: `length`** - Get the length of a string or a list.
      Useful in conjunction with `split`. [GH-1495]
  * **New resource: `aws_app_cookie_stickiness_policy`**
  * **New resource: `aws_customer_gateway`**
  * **New resource: `aws_ebs_volume`**
  * **New resource: `aws_elasticache_cluster`**
  * **New resource: `aws_elasticache_security_group`**
  * **New resource: `aws_elasticache_subnet_group`**
  * **New resource: `aws_iam_access_key`**
  * **New resource: `aws_iam_group_policy`**
  * **New resource: `aws_iam_group`**
  * **New resource: `aws_iam_instance_profile`**
  * **New resource: `aws_iam_policy`**
  * **New resource: `aws_iam_role_policy`**
  * **New resource: `aws_iam_role`**
  * **New resource: `aws_iam_user_policy`**
  * **New resource: `aws_iam_user`**
  * **New resource: `aws_lb_cookie_stickiness_policy`**
  * **New resource: `aws_proxy_protocol_policy`**
  * **New resource: `aws_security_group_rule`**
  * **New resource: `aws_vpc_dhcp_options_association`**
  * **New resource: `aws_vpc_dhcp_options`**
  * **New resource: `aws_vpn_connection_route`**
  * **New resource: `google_dns_managed_zone`**
  * **New resource: `google_dns_record_set`**
  * **Migrate to upstream AWS SDK:** Migrate the AWS provider to
      [awslabs/aws-sdk-go](https://github.com/awslabs/aws-sdk-go),
      the official `awslabs` library. Previously we had forked the library for
      stability while `awslabs` refactored. Now that work has completed, and we've
      migrated back to the upstream version.
  * core: Improve error message on diff mismatch [GH-1501]
  * provisioner/file: expand `~` in source path [GH-1569]
  * provider/aws: Better retry logic, now retries up to 11 times by default
      with exponentional backoff. This number is configurable. [GH-1787]
  * provider/aws: Improved credential detection [GH-1470]
  * provider/aws: Can specify a `token` via the config file [GH-1601]
  * provider/aws: Added new `vpc_security_group_ids` attribute for AWS
      Instances. If using a VPC, you can now modify the security groups for that
      Instance without destroying it [GH-1539]
  * provider/aws: White or blacklist account IDs that can be used to
      protect against accidents. [GH-1595]
  * provider/aws: Add a subset of IAM resources [GH-939]
  * provider/aws: `aws_autoscaling_group` retries deletes through "in progress"
      errors [GH-1840]
  * provider/aws: `aws_autoscaling_group` waits for healthy capacity during
      ASG creation [GH-1839]
  * provider/aws: `aws_instance` supports placement groups [GH-1358]
  * provider/aws: `aws_eip` supports network interface attachment [GH-1681]
  * provider/aws: `aws_elb` supports in-place changing of listeners [GH-1619]
  * provider/aws: `aws_elb` supports connection draining settings [GH-1502]
  * provider/aws: `aws_elb` increase default idle timeout to 60s [GH-1646]
  * provider/aws: `aws_key_pair` name can be omitted and generated [GH-1751]
  * provider/aws: `aws_network_acl` improved validation for network ACL ports
      and protocols [GH-1798] [GH-1808]
  * provider/aws: `aws_route_table` can target network interfaces [GH-968]
  * provider/aws: `aws_route_table` can specify propagating VGWs [GH-1516]
  * provider/aws: `aws_route53_record` supports weighted sets [GH-1578]
  * provider/aws: `aws_route53_zone` exports nameservers [GH-1525]
  * provider/aws: `aws_s3_bucket` website support [GH-1738]
  * provider/aws: `aws_security_group` name becomes optional and can be
      automatically set to a unique identifier; this helps with
      `create_before_destroy` scenarios [GH-1632]
  * provider/aws: `aws_security_group` description becomes optional with a
      static default value [GH-1632]
  * provider/aws: automatically set the private IP as the SSH address
      if not specified and no public IP is available [GH-1623]
  * provider/aws: `aws_elb` exports `source_security_group` field [GH-1708]
  * provider/aws: `aws_route53_record` supports alias targeting [GH-1775]
  * provider/aws: Remove default AWS egress rule for newly created Security Groups [GH-1765]
  * provider/consul: add `scheme` configuration argument [GH-1838]
  * provider/docker: `docker_container` can specify links [GH-1564]
  * provider/google: `resource_compute_disk` supports snapshots [GH-1426]
  * provider/google: `resource_compute_instance` supports specifying the
      device name [GH-1426]
  * provider/openstack: Floating IP support for LBaaS [GH-1550]
  * provider/openstack: Add AZ to `openstack_blockstorage_volume_v1` [GH-1726]

BUG FIXES:

  * core: Fix graph cycle issues surrounding modules [GH-1582] [GH-1637]
  * core: math on arbitrary variables works if first operand isn't a
      numeric primitive. [GH-1381]
  * core: avoid unnecessary cycles by pruning tainted destroys from
      graph if there are no tainted resources [GH-1475]
  * core: fix issue where destroy nodes weren't pruned in specific
      edge cases around matching prefixes, which could cause cycles [GH-1527]
  * core: fix issue causing diff mismatch errors in certain scenarios during
      resource replacement [GH-1515]
  * core: dependencies on resources with a different index work when
      count > 1 [GH-1540]
  * core: don't panic if variable default type is invalid [GH-1344]
  * core: fix perpetual diff issue for computed maps that are empty [GH-1607]
  * core: validation added to check for `self` variables in modules [GH-1609]
  * core: fix edge case where validation didn't pick up unknown fields
      if the value was computed [GH-1507]
  * core: Fix issue where values in sets on resources couldn't contain
      hyphens. [GH-1641]
  * core: Outputs removed from the config are removed from the state [GH-1714]
  * core: Validate against the worst-case graph during plan phase to catch cycles
      that would previously only show up during apply [GH-1655]
  * core: Referencing invalid module output in module validates [GH-1448]
  * command: remote states with uppercase types work [GH-1356]
  * provider/aws: Support `AWS_SECURITY_TOKEN` env var again [GH-1785]
  * provider/aws: Don't save "instance" for EIP if association fails [GH-1776]
  * provider/aws: launch configuration ID set after create success [GH-1518]
  * provider/aws: Fixed an issue with creating ELBs without any tags [GH-1580]
  * provider/aws: Fix issue in Security Groups with empty IPRanges [GH-1612]
  * provider/aws: manually deleted S3 buckets are refreshed properly [GH-1574]
  * provider/aws: only check for EIP allocation ID in VPC [GH-1555]
  * provider/aws: raw protocol numbers work in `aws_network_acl` [GH-1435]
  * provider/aws: Block devices can be encrypted [GH-1718]
  * provider/aws: ASG health check grace period can be updated in-place [GH-1682]
  * provider/aws: ELB security groups can be updated in-place [GH-1662]
  * provider/aws: `aws_main_route_table_association` can be deleted
      manually [GH-1806]
  * provider/docker: image can reference more complex image addresses,
      such as with private repos with ports [GH-1818]
  * provider/openstack: region config is not required [GH-1441]
  * provider/openstack: `enable_dhcp` for networking subnet should be bool [GH-1741]
  * provisioner/remote-exec: add random number to uploaded script path so
      that parallel provisions work [GH-1588]
  * provisioner/remote-exec: chmod the script to 0755 properly [GH-1796]
    </releaseNotes>
    <projectUrl>http://www.terraform.io</projectUrl>
    <tags>terraform</tags>
    <copyright>HashiCorp 2015</copyright>
    <licenseUrl>https://github.com/hashicorp/terraform/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/c98f82fc306d8e204546d890aad96b49f23b7539/terraform/icons/terraform.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
